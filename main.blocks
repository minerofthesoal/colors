<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="!A9C@E()m1f;z7.ZuR;i" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="w}HOsC?q@XuJ/@7EM[DQ"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace customPalette {" line1="    const MAX_COLORS = 21" line2="" line3="    // Default colors (21 colors, encoded as 16-bit RGB565)" line4="    let customColors: number[] = [" line5="        0x0000, // Black" line6="        0xFFFF, // White" line7="        0xF800, // Red" line8="        0x07E0, // Green" line9="        0x001F, // Blue" line10="        0xFFE0, // Yellow" line11="        0xF81F, // Magenta" line12="        0x07FF, // Cyan" line13="        0x7BEF, // Light gray" line14="        0x39E7, // Dark gray" line15="        0xFD20, // Orange" line16="        0xAFE5, // Lime" line17="        0xBDF7, // Sky blue" line18="        0xA145, // Brown" line19="        0xF6F0, // Pink" line20="        0x8430, // Purple" line21="        0xC618, // Tan" line22="        0x52AA, // Sea green" line23="        0x6B4D, // Olive" line24="        0x000F, // Navy" line25="        0x1CE7  // Teal" line26="    ]" line27="" line28="    // Set a custom color at a specific index (0 to 20)" line29="    // r, g, b should be 0 to 255" line30="    // Returns nothing, changes the color at that index" line31="    //% block=&quot;set custom color $index to red $r green $g blue $b&quot;" line32="    //% index.min=0 index.max=20" line33="    //% r.min=0 r.max=255" line34="    //% g.min=0 g.max=255" line35="    //% b.min=0 b.max=255" line36="    export function setCustomColor(index: number, r: number, g: number, b: number): void {" line37="        if (index &lt; 0 || index &gt;= MAX_COLORS) return" line38="        const color = (r &gt;&gt; 3) &lt;&lt; 11 | (g &gt;&gt; 2) &lt;&lt; 5 | (b &gt;&gt; 3)" line39="        customColors[index] = color" line40="    }" line41="" line42="    // Get the custom color at a specific index" line43="    // Returns the color as an RGB565 value" line44="    //% block=&quot;get custom color $index&quot;" line45="    //% index.min=0 index.max=20" line46="    export function getCustomColor(index: number): number {" line47="        if (index &lt; 0 || index &gt;= MAX_COLORS) return 0" line48="        return customColors[index]" line49="    }" line50="" line51="    // Apply custom colors manually to a sprite using the colors" line52="    //% block=&quot;apply custom color to sprite&quot;" line53="    export function applyToSprite(sprite: Sprite, colorIndex: number): void {" line54="        if (colorIndex &lt; 0 || colorIndex &gt;= MAX_COLORS) return" line55="        let color2 = customColors[colorIndex]" line56="" line57="        // Apply color to sprite's image by setting pixels manually" line58="        let img = sprite.image" line59="        for (let y = 0; y &lt; img.height; y++) {" line60="            for (let x = 0; x &lt; img.width; x++) {" line61="                img.setPixel(x, y, color2)" line62="            }" line63="        }" line64="    }" line65="" line66="    // Example function to reset the palette back to the default colors" line67="    //% block=&quot;reset to default colors&quot;" line68="    export function resetToDefaults(): void {" line69="        customColors = [" line70="            0x0000, 0xFFFF, 0xF800, 0x07E0, 0x001F, 0xFFE0, 0xF81F, 0x07FF," line71="            0x7BEF, 0x39E7, 0xFD20, 0xAFE5, 0xBDF7, 0xA145, 0xF6F0, 0x8430," line72="            0xC618, 0x52AA, 0x6B4D, 0x000F, 0x1CE7" line73="        ]" line74="    }" line75="}" numlines="76"></mutation></block></statement></block></xml>